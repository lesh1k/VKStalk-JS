#!/usr/bin/env node

/* eslint no-console: 0 */
'use strict';

const program = require('commander');
const scraper = require('./scraper.js');
const report = require('./report.js');
const helpers = require('./helpers/helpers.js');
const logger = require('./logger');


program
    .version(require('../package.json').version)
    .arguments('<cmd> [env]');

program
    .command('stalk <user_id>')
    .description('Collect data and monitor updates for user with ID=user_id')
    .action(user_id => {
        scraper.work(user_id);
    });

program
    .command('report <user_id>')
    .description('Generate a report/summary on collected data about the user with ID=user_id')
    .option('-t, --type <type>', 'Report type', /^(general|music|updates)$/, 'music')
    .option('--period <[from]..[to]>', 'Datetime range from..to. Datetime format: yyyy.mm.dd HH:MM:ss:ms', helpers.datetimeRange)
    // .option('--raw-data', 'Return raw data, without formatting')
    .action((user_id, options) => {
        const type = options.type;
        const params = {
            period: options.period
        };
        logger.info(`Requested ${type} report for user with ID=${user_id}.`, {params: params});
        report(type, user_id, params)
            .then(data => {
                helpers.sendData({
                    type: 'report',
                    report_type: type,
                    data: data
                });
                process.exit();
            });
    });

program
    .command('help')
    .description('Display information about accepted commands and options')
    .action(() => {
        program.help();
        process.exit();
    });

program.parse(process.argv);
